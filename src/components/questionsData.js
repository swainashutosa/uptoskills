// questionsData.js
const questions = [
  // DSA Easy
  {
    id: 1,
    category: "DSA",
    difficulty: "Easy",
    title: "Reverse a String",
    description: "Create a function that takes a string as input and returns the reversed version of that string.",
    starterCode: `function reverseString(str) {\n  // Write your code here\n}`,
    solution: `function reverseString(str) {\n  return str.split('').reverse().join('');\n}`,
    testCases: [
      { input: '"hello"', output: '"olleh"' },
      { input: '"world"', output: '"dlrow"' },
    ],
  },
  {
    id: 2,
    category: "DSA",
    difficulty: "Easy",
    title: "Find Maximum Number",
    description: "Write a function that returns the largest number from a given array of integers.",
    starterCode: `function findMax(arr) {\n  // Write your code here\n}`,
    solution: `function findMax(arr) {\n  return Math.max(...arr);\n}`,
    testCases: [
      { input: "[1, 3, 2]", output: "3" },
      { input: "[-1, -5, 0]", output: "0" },
    ],
  },
  {
    id: 3,
    category: "DSA",
    difficulty: "Easy",
    title: "Check Even or Odd",
    description: "Write a function that determines if a number is even. Return true if even, false if odd.",
    starterCode: `function isEven(num) {\n  // Write your code here\n}`,
    solution: `function isEven(num) {\n  return num % 2 === 0;\n}`,
    testCases: [
      { input: "4", output: "true" },
      { input: "7", output: "false" },
    ],
  },
  {
    id: 4,
    category: "DSA",
    difficulty: "Easy",
    title: "Sum of Array",
    description: "Write a function that returns the sum of all the numbers in a given array.",
    starterCode: `function sumArray(arr) {\n  // Write your code here\n}`,
    solution: `function sumArray(arr) {\n  return arr.reduce((a, b) => a + b, 0);\n}`,
    testCases: [
      { input: "[1, 2, 3]", output: "6" },
      { input: "[10, -2, 7]", output: "15" },
    ],
  },

  // DSA Medium
  {
    id: 5,
    category: "DSA",
    difficulty: "Medium",
    title: "Check Palindrome",
    description: "Create a function that checks if a string reads the same forward and backward (a palindrome). Return true or false accordingly.",
    starterCode: `function isPalindrome(str) {\n  // Write your code here\n}`,
    solution: `function isPalindrome(str) {\n  return str === str.split('').reverse().join('');\n}`,
    testCases: [
      { input: '"racecar"', output: "true" },
      { input: '"hello"', output: "false" },
    ],
  },
  {
    id: 6,
    category: "DSA",
    difficulty: "Medium",
    title: "Find Fibonacci Number",
    description: "Write a recursive function to return the nth number in the Fibonacci sequence (0-indexed).",
    starterCode: `function fibonacci(n) {\n  // Write your code here\n}`,
    solution: `function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}`,
    testCases: [
      { input: "5", output: "5" },
      { input: "7", output: "13" },
    ],
  },
  {
    id: 7,
    category: "DSA",
    difficulty: "Medium",
    title: "Count Vowels",
    description: "Write a function that counts the number of vowels (a, e, i, o, u) in a given string, ignoring case.",
    starterCode: `function countVowels(str) {\n  // Write your code here\n}`,
    solution: `function countVowels(str) {\n  return str.match(/[aeiou]/gi)?.length || 0;\n}`,
    testCases: [
      { input: '"hello"', output: "2" },
      { input: '"world"', output: "1" },
    ],
  },
  {
    id: 8,
    category: "DSA",
    difficulty: "Medium",
    title: "Remove Duplicates from Array",
    description: "Write a function that removes duplicate values from an array and returns the new array with unique elements only.",
    starterCode: `function removeDuplicates(arr) {\n  // Write your code here\n}`,
    solution: `function removeDuplicates(arr) {\n  return [...new Set(arr)];\n}`,
    testCases: [
      { input: "[1, 2, 2, 3]", output: "[1, 2, 3]" },
      { input: "[4, 4, 4, 4]", output: "[4]" },
    ],
  },

  // DSA Hard
  {
    id: 9,
    category: "DSA",
    difficulty: "Hard",
    title: "Merge Sort",
    description: "Implement the merge sort algorithm to sort an array of numbers in ascending order.",
    starterCode: `function mergeSort(arr) {\n  // Write your code here\n}`,
    solution: `function mergeSort(arr) {\n  if (arr.length <= 1) return arr;\n  const mid = Math.floor(arr.length / 2);\n  const left = mergeSort(arr.slice(0, mid));\n  const right = mergeSort(arr.slice(mid));\n  const merge = [];\n  while (left.length && right.length) {\n    if (left[0] < right[0]) merge.push(left.shift());\n    else merge.push(right.shift());\n  }\n  return merge.concat(left, right);\n}`,
    testCases: [
      { input: "[3,1,4,1,5]", output: "[1,1,3,4,5]" },
      { input: "[10,9,8,7]", output: "[7,8,9,10]" },
    ],
  },
  {
    id: 10,
    category: "DSA",
    difficulty: "Hard",
    title: "Binary Search",
    description: "Write a function to implement binary search on a sorted array. Return the index of the target element or -1 if not found.",
    starterCode: `function binarySearch(arr, target) {\n  // Write your code here\n}`,
    solution: `function binarySearch(arr, target) {\n  let left = 0, right = arr.length - 1;\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] === target) return mid;\n    else if (arr[mid] < target) left = mid + 1;\n    else right = mid - 1;\n  }\n  return -1;\n}`,
    testCases: [
      { input: "[1,2,3,4,5], 3", output: "2" },
      { input: "[1,2,3,4,5], 6", output: "-1" },
    ],
  },
  {
    id: 11,
    category: "DSA",
    difficulty: "Hard",
    title: "Longest Substring Without Repeating Characters",
    description: "Given a string, find the length of the longest substring without repeating characters.",
    starterCode: `function lengthOfLongestSubstring(s) {\n  // Write your code here\n}`,
    solution: `function lengthOfLongestSubstring(s) {\n  let set = new Set();\n  let left = 0, maxLen = 0;\n  for (let right = 0; right < s.length; right++) {\n    while (set.has(s[right])) {\n      set.delete(s[left]);\n      left++;\n    }\n    set.add(s[right]);\n    maxLen = Math.max(maxLen, right - left + 1);\n  }\n  return maxLen;\n}`,
    testCases: [
      { input: '"abcabcbb"', output: "3" },
      { input: '"bbbbb"', output: "1" },
    ],
  },
  {
    id: 12,
    category: "DSA",
    difficulty: "Hard",
    title: "Validate Parentheses",
    description: "Write a function to determine if a given string of parentheses is valid. Every opening bracket must be closed in the correct order.",
    starterCode: `function isValidParentheses(s) {\n  // Write your code here\n}`,
    solution: `function isValidParentheses(s) {\n  const stack = [];\n  const map = {')': '(', ']': '[', '}': '{'};\n  for (let char of s) {\n    if (Object.values(map).includes(char)) {\n      stack.push(char);\n    } else if (map[char]) {\n      if (stack.pop() !== map[char]) return false;\n    }\n  }\n  return stack.length === 0;\n}`,
    testCases: [
      { input: '"()[]{}"', output: "true" },
      { input: '"(]"', output: "false" },
    ],
  },

  // SQL Easy
  {
    id: 13,
    category: "SQL",
    difficulty: "Easy",
    title: "Select All From Table",
    description: "Write a SQL query to retrieve all columns and records from the Employees table.",
    starterCode: "SELECT * FROM Employees;",
    solution: "SELECT * FROM Employees;",
    testCases: [],
  },
  {
    id: 14,
    category: "SQL",
    difficulty: "Easy",
    title: "Filter by Department",
    description: "Write a query to get all employees who work in the 'Sales' department.",
    starterCode: "SELECT * FROM Employees WHERE Department = 'Sales';",
    solution: "SELECT * FROM Employees WHERE Department = 'Sales';",
    testCases: [],
  },
  {
    id: 15,
    category: "SQL",
    difficulty: "Easy",
    title: "Order by Salary",
    description: "Write a SQL query to select all employees and sort them in descending order by salary.",
    starterCode: "SELECT * FROM Employees ORDER BY Salary DESC;",
    solution: "SELECT * FROM Employees ORDER BY Salary DESC;",
    testCases: [],
  },
  {
    id: 16,
    category: "SQL",
    difficulty: "Easy",
    title: "Select Specific Columns",
    description: "Write a query to fetch only the Name and Department columns from the Employees table.",
    starterCode: "SELECT Name, Department FROM Employees;",
    solution: "SELECT Name, Department FROM Employees;",
    testCases: [],
  },

  // SQL Medium
  {
    id: 17,
    category: "SQL",
    difficulty: "Medium",
    title: "Join Two Tables",
    description: "Write a SQL query to join Employees with Departments table using DepartmentID and show all data.",
    starterCode: `SELECT * FROM Employees\nJOIN Departments ON Employees.DepartmentID = Departments.ID;`,
    solution: `SELECT * FROM Employees\nJOIN Departments ON Employees.DepartmentID = Departments.ID;`,
    testCases: [],
  },
  {
    id: 18,
    category: "SQL",
    difficulty: "Medium",
    title: "Group by Department",
    description: "Write a SQL query to find the average salary of employees in each department.",
    starterCode: `SELECT Department, AVG(Salary) FROM Employees GROUP BY Department;`,
    solution: `SELECT Department, AVG(Salary) FROM Employees GROUP BY Department;`,
    testCases: [],
  },
  {
    id: 19,
    category: "SQL",
    difficulty: "Medium",
    title: "Count Employees per Department",
    description: "Write a query to count the number of employees in each department.",
    starterCode: `SELECT Department, COUNT(*) FROM Employees GROUP BY Department;`,
    solution: `SELECT Department, COUNT(*) FROM Employees GROUP BY Department;`,
    testCases: [],
  },
  {
    id: 20,
    category: "SQL",
    difficulty: "Medium",
    title: "Employees with High Salary",
    description: "Write a SQL query to find employees earning more than the average salary.",
    starterCode: `SELECT * FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees);`,
    solution: `SELECT * FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees);`,
    testCases: [],
  },

  // SQL Hard
  {
    id: 21,
    category: "SQL",
    difficulty: "Hard",
    title: "Second Highest Salary",
    description: "Write a SQL query to find the second highest salary in the Employees table.",
    starterCode: `SELECT MAX(Salary) FROM Employees WHERE Salary < (SELECT MAX(Salary) FROM Employees);`,
    solution: `SELECT MAX(Salary) FROM Employees WHERE Salary < (SELECT MAX(Salary) FROM Employees);`,
    testCases: [],
  },
  {
    id: 22,
    category: "SQL",
    difficulty: "Hard",
    title: "Employees Without Managers",
    description: "Write a query to find all employees who do not have a manager assigned (i.e., ManagerID is NULL).",
    starterCode: `SELECT * FROM Employees WHERE ManagerID IS NULL;`,
    solution: `SELECT * FROM Employees WHERE ManagerID IS NULL;`,
    testCases: [],
  },
  {
    id: 23,
    category: "SQL",
    difficulty: "Hard",
    title: "Find Duplicate Names",
    description: "Write a query to find duplicate employee names in the Employees table.",
    starterCode: `SELECT Name, COUNT(*) FROM Employees GROUP BY Name HAVING COUNT(*) > 1;`,
    solution: `SELECT Name, COUNT(*) FROM Employees GROUP BY Name HAVING COUNT(*) > 1;`,
    testCases: [],
  },
  {
    id: 24,
    category: "SQL",
    difficulty: "Hard",
    title: "Top Earners Per Department",
    description: "Write a query to find the employee with the highest salary in each department.",
    starterCode: `SELECT Department, MAX(Salary) FROM Employees GROUP BY Department;`,
    solution: `SELECT Department, MAX(Salary) FROM Employees GROUP BY Department;`,
    testCases: [],
  },
];

export default questions;
